#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string>
#include <vector>
using namespace std;

#define eps (le-7)
#define INF (le60)
#define MAX (1<<30)
#define MIN (-MAX)
#define LL long long

#define pb push_back

#define FOR(i,s,e) for (int i = int(s); i != int(e); i++)
#define FORIT(i,c) for (typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define ISEQ(c) (c).begin(), (c).end()
#define gcd(a,b) __gcd(a,b)
#define EQ(a,b) (abs(a-b) <eps)
#define sqr(a) ((a)*(a))
#define popcount(n) __builtin_popcount(n)

inline LL strtoint(const string &s) {stringstream ss;ss<<s;LL ret;ss>>ret;return ret;}
inline string inttostr(const LL &a) {stringstream ss;ss<<a;string ret;ss>>ret;return ret;}

class PiecewiseLinearFunctionDiv2 {

  public: vector <int> countSolutions(vector <int> Y, vector <int> query) {
             int size = Y.size();
             int qsize = query.size();
             vector<int> ans;

             for(int i=0;i<qsize;i++)
             {
                int count = 0;
                for(int j=1;j<size;j++)
                {
                   int mi = min(Y[j-1],Y[j]);
                   int ma = max(Y[j-1],Y[j]);
                   if(query[i]==mi && query[i]==ma)
                   {
                      count=-1;
                      break;
                   }
                   if(query[i]>mi && query[i]<ma)
                      count++;
                   if(query[i]==Y[j-1])
                      count++;
                   if(j==size-1 && query[i]==Y[j])
                      count++;

                }
                ans.push_back(count);
             }
		return ans;
	}

};

// Edited by VimCoder 0.3.5
// http://github.com/chazmcgarvey/vimcoder